@page "/countries/create"
@page "/countries/update/{CountryId:int}"
@inject ICountryRepository _countryRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@PageTitle Country</h3>
    <div class="col-10">
        @if (IsLoading)
        {
                <div class="text-center">
                        <img src="/images/loading.gif">
                    </div>
        }else{
                <EditForm Model="Country" OnValidSubmit="InsertOrUpdateCountry">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    <label>Country Name</label>
                    <InputText @bind-Value="@Country.CountryName" class="form-control"></InputText>
                    <ValidationMessage For="()=>Country.CountryName"></ValidationMessage>
                </div>
                <div class="form-group mt-2">
                    <button class="btn btn-primary">@PageTitle</button>
                    <NavLink href="/countries" class="btn btn-secondary">Back</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int CountryId { get; set; }
    public bool IsLoading { get; set; } = true;
    public CountryDto Country { get; set; } = new CountryDto();
    public string? PageTitle { get; set; } = "Add";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCountry();
        }
    }

    private async Task LoadCountry(){
        if (CountryId > 0 )
        {
            Country = await _countryRepository.GetByIdAsync(CountryId);
            PageTitle = "Update";
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task InsertOrUpdateCountry(){
        if (CountryId > 0)
        {
            try{
                await _countryRepository.UpdateAsync(Country);
                await _jsRuntime.ToastrSuccess("Country Updated");
            }catch(Exception){
                await _jsRuntime.ToastrError("Something went wrong");
            }


        } else {
            try{
                await _countryRepository.InsertAsync(Country);
                await _jsRuntime.ToastrSuccess("Country Created");
            }catch(Exception){
                await _jsRuntime.ToastrError("Something went wrong");
            }
            
        }
        _navigationManager.NavigateTo("/countries");
    }
}
